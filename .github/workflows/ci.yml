name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality Checks
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
        pip install -r requirements.txt
    
    - name: Run Black (code formatting)
      run: black --check --diff .
    
    - name: Run isort (import sorting)
      run: isort --check-only --diff .
    
    - name: Run Flake8 (linting)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run MyPy (type checking)
      run: mypy services/ libs/ --ignore-missing-imports

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit (security linting)
      run: bandit -r services/ libs/ -f json -o bandit-report.json
    
    - name: Run Safety (dependency vulnerability check)
      run: safety check --json --output safety-report.json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, ingest-service, persona-service, chat-service, 3d-service, analytics-service, payments-service]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Run unit tests for ${{ matrix.service }}
      run: |
        cd services/${{ matrix.service }}
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: services/${{ matrix.service }}/coverage.xml
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_bwenge
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio testcontainers
    
    - name: Set up test environment
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_bwenge
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret
        OPENAI_API_KEY: test-openai-key
      run: |
        # Initialize test database
        PGPASSWORD=test_password psql -h localhost -U test_user -d test_bwenge -f scripts/init-db.sql
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_bwenge
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret
        OPENAI_API_KEY: test-openai-key
      run: |
        python -m pytest tests/integration/ -v --tb=short
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          pytest-report.xml
          test-results/

  # Build Docker Images
  build-images:
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests]
    strategy:
      matrix:
        service: [api-gateway, auth-service, ingest-service, persona-service, chat-service, 3d-service, analytics-service, payments-service]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: bwenge/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./services/${{ matrix.service }}/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Compose
      run: |
        # Create test environment file
        cp .env.example .env.test
        echo "OPENAI_API_KEY=test-key" >> .env.test
        echo "JWT_SECRET=test-jwt-secret-for-e2e" >> .env.test
    
    - name: Start services with Docker Compose
      run: |
        docker-compose -f docker-compose.yml --env-file .env.test up -d
        
        # Wait for services to be ready
        sleep 30
        
        # Health check
        for service in api-gateway auth-service ingest-service persona-service; do
          echo "Checking $service health..."
          timeout 60 bash -c "until curl -f http://localhost:800${service: -1}/health; do sleep 2; done"
        done
    
    - name: Run E2E tests
      run: |
        python -m pytest tests/integration/test_end_to_end.py -v --tb=short
    
    - name: Collect service logs
      if: always()
      run: |
        mkdir -p logs
        docker-compose logs > logs/docker-compose.log
        docker-compose logs api-gateway > logs/api-gateway.log
        docker-compose logs auth-service > logs/auth-service.log
    
    - name: Upload logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-logs
        path: logs/
    
    - name: Cleanup
      if: always()
      run: docker-compose down -v

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up K6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Start services
      run: |
        cp .env.example .env.perf
        echo "OPENAI_API_KEY=test-key" >> .env.perf
        docker-compose --env-file .env.perf up -d
        sleep 30
    
    - name: Run performance tests
      run: |
        k6 run tests/performance/load-test.js
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results.json
    
    - name: Cleanup
      if: always()
      run: docker-compose down -v

  # Deployment (staging)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # This could be kubectl apply, terraform apply, etc.
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke tests for staging environment

  # Deployment (production)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests, performance-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on production..."
        # Add smoke tests for production environment
    
    - name: Notify deployment
      if: always()
      run: |
        echo "Sending deployment notification..."
        # Add notification logic (Slack, email, etc.)

  # Security and Compliance
  security-compliance:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run OWASP ZAP security scan
      if: github.event_name != 'pull_request'
      run: |
        docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py \
          -t http://localhost:8000 -J zap-report.json || true
    
    - name: Upload ZAP results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: zap-security-report
        path: zap-report.json